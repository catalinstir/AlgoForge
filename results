Okay, introducing a 'guest' role for users who haven't logged in primarily involves changes on the frontend to manage this state representation. The backend doesn't need modification as it only deals with authenticated users ('user' or 'admin').

Here's what you should change:

Update UserRole Type:
Ensure the shared type definition includes 'guest'.

In frontend/src/App.tsx:
TypeScript

// Add 'guest' to the possible roles
export type UserRole = "guest" | "user" | "admin";
Represent Guest State in App.tsx:
Your current setup where isLoggedIn is false and currentUser is null when not authenticated already perfectly represents the 'guest' state. You don't need to create a specific guest user object in the state. The key is how you interpret this state in your components.

Initial State: The initial state (isLoggedIn: false, currentUser: null, isLoading: true) is correct. After the initial useEffect check, if no valid token is found, isLoading becomes false, and the state remains isLoggedIn: false, currentUser: null, which is your 'guest' state.
handleLogout: This function already sets the state to isLoggedIn: false and currentUser: null, correctly transitioning back to the 'guest' state.
Update Components Displaying User Info (e.g., Navbar):
Modify components that show user-specific information to explicitly handle the case where isLoggedIn is false (i.e., the user is a guest).

Example for frontend/src/components/Navbar.tsx (assuming you have a similar structure):
TypeScript

import React from 'react';
import { Link, NavLink } from 'react-router-dom';
import { User, UserRole } from '../App'; // Import User and UserRole

interface NavbarProps {
  isLoggedIn: boolean;
  currentUser: User | null;
  onLoginClick: () => void; // Assuming this navigates to /login
  onLogout: () => void;
}

const Navbar = ({ isLoggedIn, currentUser, onLoginClick, onLogout }: NavbarProps) => {
  const displayRole = currentUser?.role ?? 'guest'; // Determine display role

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
      <div className="container-fluid">
        <Link className="navbar-brand" to="/">AlgoRush</Link>
        <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav me-auto mb-2 mb-lg-0">
            <li className="nav-item">
              <NavLink className="nav-link" to="/problems">Problems</NavLink>
            </li>
            <li className="nav-item">
              <NavLink className="nav-link" to="/browse">Browse</NavLink>
            </li>
            <li className="nav-item">
              <NavLink className="nav-link" to="/forums">Forums</NavLink>
            </li>
            {/* Only show Admin link if user is logged in and is an admin */}
            {isLoggedIn && currentUser?.role === 'admin' && (
               <li className="nav-item">
                 <NavLink className="nav-link" to="/admin">Admin</NavLink>
               </li>
            )}
          </ul>
          {/* Right side: User/Guest actions */}
          <div className="d-flex">
            {isLoggedIn && currentUser ? (
              // --- Logged In ---
              <div className="nav-item dropdown">
                <a className="nav-link dropdown-toggle text-light" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Welcome, {currentUser.username} ({currentUser.role})
                </a>
                <ul className="dropdown-menu dropdown-menu-end bg-dark border-secondary" aria-labelledby="navbarDropdown">
                  <li><Link className="dropdown-item text-light" to="/profile">Profile</Link></li>
                  <li><Link className="dropdown-item text-light" to="/settings">Settings</Link></li>
                  <li><hr className="dropdown-divider border-secondary" /></li>
                  <li><button className="dropdown-item text-danger" onClick={onLogout}>Logout</button></li>
                </ul>
              </div>
            ) : (
              // --- Guest (Not Logged In) ---
              <>
                <span className="navbar-text text-muted me-3">
                   Welcome, Guest
                </span>
                <button className="btn btn-outline-primary" onClick={onLoginClick}>
                  Login / Sign Up
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
Adapt other components similarly. If a component needs the user's role, check isLoggedIn. If false, the role is 'guest'; otherwise, use currentUser.role.
Route Protection:
Your ProtectedRoute component already correctly handles guests (!isLoggedIn) by redirecting them away from protected routes. No changes are needed there. Public routes remain accessible to guests.

In summary, the main task is updating the UI components (like the Navbar) to display appropriate content or actions when isLoggedIn is false, explicitly acknowledging this state as the 'guest' role. The underlying state management and backend logic remain largely the same.
